// # 非同期で処理できる

// ## 1. 非同期処理とは

// 非同期処理とはなにか、またなぜ必要なのかを、プログラミング初心者にわかるように説明してください。

// A. 非同期処理とは、あるタスクが完了するのを待つことなく次のタスクを実行する方法のことを指します。

// 非同期処理が必要な理由は2つあります。1つがパフォーマンスの向上ともう1つがリソースの有効活用です。

// パフォーマンスについては例えば、ウェブページがサーバーから大量のデータをフェッチする必要がある場合、
// データをすべて取得するまでユーザーに対してレスポンスを返さなければならないとなると、ユーザーはページがロードされるのを長時間待つことになります。

// 非同期処理を用いると、サーバーからデータをフェッチしている間でも、他の処理（例えばUIの更新など）を行うことができます。

// その結果、ユーザーはデータがすべてロードされるまで待つことなく、アプリケーションを使用することができます。

// リソースの有効活用については例えば、1つのリクエストを処理するためにサーバーが完全にブロックされると、他のリクエストが待たされるか、
// あるいはタイムアウトしてしまう可能性があります。

// しかし、非同期処理を用いれば、一つのリクエストが処理されている間にも他のリクエストの処理を開始することができます。

// これにより、システム全体のリソースを有効に活用し、より多くのリクエストを同時に処理することが可能になります。

// ## 2. Promise

// ある数字の配列をソートする必要がありますが、ソートは CPU に大きな負荷をかけ、メインスレッドのブロックを引き起こす可能性があります。そこで、配列のソートを非同期に行うことを考えます。

// asyncSort という関数を作成してください。この関数は、整数の配列をパラメータとして受け取り、整数を昇順に並べ替えることで、Promise を返します。この関数は非同期でソート処理を行います。

// 関数の内部で、setTimeout 関数を使用して2秒間処理を一時停止します。これにより、CPUに負荷をかけるタスクの遅延をシミュレートすることができます。setTimeout のコールバックがトリガーされると、配列をソートし、そのソートされた配列でPromiseを解決します。

// 以下のコードを完成させ、asyncSort 関数を呼び出し、ソートされた配列をコンソールに出力してください。なお、asyncSort 関数を呼び出しの後に `console.log('同期処理');` を実行したにもかかわらず、`同期処理` が先に表示されることを確認してください。これが非同期処理の特徴です。

function asyncSort(numbers) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve(numbers.sort((a, b) => a - b));
    }, 2000);
  });
}

const numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5];
asyncSort(numbers)
  .then((sortedNumbers) => {
    console.log(sortedNumbers);
  })
  .catch((error) => {
    console.error(`Error: ${error}`);
  });

console.log("同期処理");

// 同期処理
// [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]

// ## 3. async/await

// async/await を使用して、asyncSort 関数を同期的に呼び出します。

// 以下のコードを完成させ、ソートされた配列をコンソールに出力してください。

// なお、Async Function の外で実行した `console.log('同期処理');` は先に表示され、一方で Async Function 内で await 式の後に実行された `console.log(sortedNumbers);` は後に表示されることを確認してください。非同期処理を同期処理のように扱え、処理の流れが読みやすくなるのが async/await の特徴です。

function asyncSort(numbers) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve(numbers.sort((a, b) => a - b));
    }, 2000);
  });
}

async function sortNumbers() {
  const numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5];
  const sortedNumbers = await asyncSort(numbers);
  console.log(sortedNumbers); // ソートされた配列をコンソールに出力する
}

sortNumbers();
console.log("同期処理");

// 同期処理
// [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]
